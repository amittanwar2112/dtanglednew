{"version":3,"sources":["components/calendar/TripsCalendar.js","components/trips/Trip.js","components/trips/Trips.js","App.js","serviceWorker.js","index.js"],"names":["localizer","momentLocalizer","moment","eventStyleGetter","event","start","end","isSelected","console","log","style","backgroundColor","color","borderRadius","opacity","border","display","Date","TripsCalendar","props","events","trips","map","trip","id","title","destination","allDay","add","duration","format","startAccessor","endAccessor","height","eventPropGetter","rand","Math","round","random","getModalStyle","top","left","transform","useStyles","makeStyles","theme","createStyles","paper","position","width","palette","background","boxShadow","shadows","padding","spacing","Trip","classes","newDestination","newComment","React","useState","modalStyle","open","setOpen","body","className","TextField","onChange","target","value","label","variant","margin","Button","size","onClick","jsonobhect","editTripAction","Card","CardContent","Typography","component","dest","comment","CardActions","deleteTripAction","Modal","onClose","aria-labelledby","aria-describedby","Trips","this","key","Component","App","state","getData","axios","get","then","res","data","setState","deleteTrip","tripId","delete","editTrip","newTrip","put","response","catch","error","AppBar","Toolbar","IconButton","edge","aria-label","Grid","container","item","xs","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b892232b.chunk.js","sourcesContent":["import React from 'react';\nimport { Calendar, momentLocalizer   } from 'react-big-calendar';\nimport moment from 'moment';\n\n\nconst localizer = momentLocalizer(moment)\n\nlet eventStyleGetter = (event, start, end, isSelected) => {\n    console.log(event);\n    var backgroundColor = event.color;\n    var style = {\n        backgroundColor: backgroundColor,\n        borderRadius: '0px',\n        opacity: 0.8,\n        color: 'black',\n        border: '0px',\n        display: 'block'\n    };\n    return {\n        style: style\n    };\n}\n\n\nlet myEventsList = [{\n    id: 0,\n    title: 'All Day Event very long title',\n    allDay: true,\n    start: new Date(\"2019-12-18T20:56:12.083Z\"),\n    end: new Date(\"2019-12-18T20:56:12.083Z\"),\n    color: \"#f56c42\"\n}]\n\nexport function TripsCalendar(props) {\n    return (\n        <Calendar\n            localizer={localizer}\n            events={props.trips.map( trip => { return { id: trip.id, title:trip.destination, allDay: true, start: new Date(trip.start), end: new Date(moment(trip.start).add(trip.duration, 'days').format()), color:trip.color } })}\n            startAccessor=\"start\"\n            endAccessor=\"end\"\n            style={{ height: 700 }}\n            eventPropGetter={eventStyleGetter}\n        />\n    );\n  }","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport DeleteRoundedIcon from '@material-ui/icons/DeleteRounded';\nimport FormatQuoteIcon from '@material-ui/icons/FormatQuote';\nimport './trip.css'\nimport moment from 'moment';\nimport TextField from '@material-ui/core/TextField';\nimport Modal from '@material-ui/core/Modal';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\n\n\nfunction rand() {\n    return Math.round(Math.random() * 20) - 10;\n  }\n\nfunction getModalStyle() {\n    const top = 50 + rand();\n    const left = 50 + rand();\n  \n    return {\n      top: `${top}%`,\n      left: `${left}%`,\n      transform: `translate(-${top}%, -${left}%)`,\n    };\n  }\n  \n  const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n      paper: {\n        position: 'absolute',\n        width: 500,\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n      },\n    }),\n  );\n\nexport function Trip(props) {\n    let start = moment(props.start).format(\"YYYY-MM-DD HH:mm:ss\")\n    console.log(start)\n    const classes = useStyles();\n    let newDestination=\"\";\n    let newComment=\"\";\n    const [modalStyle] = React.useState(getModalStyle);\n    const [open, setOpen] = React.useState(false);\n    const ChangeDestination = (event) =>{\n        newDestination= event.target.value;\n    }\n    const ChangeComment = (event) =>{\n        newComment= event.target.value;\n    }\n    const Submit = () =>{\n        \n        let jsonobhect={\n            \"id\" : props.id,\n            \"destination\": newDestination ,\n            \"start\": props.start,\n            \"duration\": props.duration,\n            \"comment\": newComment,\n            \"color\" : props.color\n\n     \n        }\n        console.log(jsonobhect);\n        props.editTripAction(jsonobhect);\n    }\n  \n    const handleOpen = () => {\n      setOpen(true);\n    };\n    const handleClose = () => {\n        setOpen(false);\n      };\n\n    const body = (\n        <div  style={modalStyle} className={classes.paper}>\n            <TextField id=\"outlined-basic\" onChange={ChangeDestination} label=\"Change Destination\" variant=\"outlined\" style={{margin:\"3px\"}} />\n            <TextField id=\"outlined-basic\" onChange={ ChangeComment} label=\"Change Comment\" variant=\"outlined\" style={{margin:\"3px\"}}/>\n            <Button size=\"large\" onClick={Submit} style={{backgroundColor:\" #cccccc\"}} >Submit</Button>\n        </div>\n      );\n\n    return (\n        <Card className=\"card-body\">\n            <CardContent>\n                <Typography variant=\"h5\" component=\"h2\">\n                    {props.dest}\n                </Typography>\n                <br/>\n                <Typography variant=\"body2\" component=\"p\">\n                    Started on {start}\n                    <br/>\n                    Duration: {props.duration} days\n                </Typography>\n                <br/>\n                <Typography  color=\"textSecondary\">\n                    <FormatQuoteIcon/>{props.comment}\n                </Typography>\n            </CardContent>\n            <CardActions>\n                <Button size=\"small\" onClick={ () => props.deleteTripAction(props.id) } ><DeleteRoundedIcon /></Button>\n                <Button size=\"small\" onClick={handleOpen} style={{backgroundColor:\" #cccccc\"}} >Edit</Button>\n                <Modal\n                    open={open}\n                    onClose={handleClose}\n                    aria-labelledby=\"simple-modal-title\"\n                    aria-describedby=\"simple-modal-description\">\n                     {body}\n                </Modal>\n            </CardActions>\n        </Card>\n    );\n}","import React, { Component } from 'react';\nimport {Trip} from './Trip'\nimport './Trips.css'\n\n\nexport class Trips extends Component {\n    constructor() {\n        super()\n\n    }\n\n\n    render() {\n        return (\n            <div className=\"trips-container\">\n                {this.props.trips.map( trip => {\n                    return <Trip\n                        key={trip.id}\n                        id={trip.id}\n                        dest={trip.destination}\n                        start={trip.start}\n                        duration={trip.duration}\n                        comment={trip.comment}\n                        color={trip.color}\n                        deleteTripAction={this.props.deleteTripAction}\n                        editTripAction={this.props.editTripAction}\n\n                     />\n                } )}\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport { TripsCalendar } from './components/calendar/TripsCalendar'\nimport {Trips} from './components/trips/Trips'\nimport { Grid} from \"@material-ui/core\"\nimport axios from 'axios';\n\nimport HomeIcon from '@material-ui/icons/Home';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\n\n\nclass App extends React.Component {\n\n  state = {\n    trips: []\n  }\n\n  componentDidMount() {\n    this.getData()\n  }\n\n  getData = () => {\n      axios.get(`https://detangled.in/develop/4f659ee8-853d-4890-94f8-75f7d5f33044/events`)\n      .then(res => {\n      const trips = res.data;\n      this.setState({ trips });\n    })\n  }\n\n  deleteTrip = (tripId) => {\n    axios.delete(`http://detangled.in/develop/4f659ee8-853d-4890-94f8-75f7d5f33044/events/${tripId}`)\n    .then(res => {\n      console.log(res)\n      this.getData()\n    })\n  }\n\n  editTrip = (newTrip) =>{\n    axios.put('https://detangled.in/develop/4f659ee8-853d-4890-94f8-75f7d5f33044/events', newTrip)\n    .then(function (response) {\n      console.log(response);\n      this.getData()\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <div >\n          <AppBar position=\"static\">\n            <Toolbar>\n              <IconButton edge=\"start\"  color=\"inherit\" aria-label=\"menu\">\n                <HomeIcon />\n              </IconButton>\n              <Typography variant=\"h6\" >\n                Trip Calendar\n              </Typography>\n            </Toolbar>\n          </AppBar>\n        </div>\n        <Grid container className=\"flex-section\">\n          <Grid\n            item\n            xs={6}\n            className={\"flex-col-scroll\"} >\n            \n            <Trips trips={this.state.trips}\n              deleteTripAction={this.deleteTrip}\n              editTripAction={this.editTrip} />\n            \n          </Grid>\n\n          <Grid\n            item\n            xs={6}\n            className={\"flex-col-scroll\"} >\n            <TripsCalendar trips={this.state.trips}/>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}